/**
 * jsgrid 의 스타일과 특수 필드들을 포함하여 사용 할 수 있도로 하였다.
 * 
 * @author sangmok (appsoga@gmail.com )
 * @since 2019.11.21
 */
!function (t, e, i) { function r(e) { this.min = "", this.max = "", t.Field.call(this, e) } r.prototype = new t.Field({ css: "data-field", format: "yyyy-MM-dd", filtering: !0, inserting: !0, editing: !0, autosearch: !0, readOnly: !1, sorter: function (t, e) { return new Date(t) - new Date(e) }, itemTemplate: function (t) { return t ? new Date(t).toLocaleDateString() : "-" }, filterTemplate: function (t) { if (!this.filtering) return ""; var i = this._grid; return $input = e("<input>"), $result = this.filterControl = this._filterPicker = $input.datepicker({ defaultDate: new Date }), this.autosearch && $input.on("change", function (t) { i.search() }), $result }, filterValue: function () { if (this.filtering) return this.filterControl.datepicker("getDate") }, insertTemplate: function (t) { return this.inserting ? this._insertPicker = e("<input>").datepicker({ defaultDate: new Date }) : t }, insertValue: function () { var t = this._insertPicker.datepicker("getDate"); return t ? t.toISOString() : t }, editTemplate: function (t) { return this.editing ? this._editPicker = t ? e("<input>").datepicker().datepicker("setDate", new Date(t)) : e("<input>").datepicker().datepicker("setDate", new Date) : t }, editValue: function () { if (this.editing) { var t = this._editPicker.datepicker("getDate"); if (t) return t.toISOString() } return t } }), t.fields.date = t.DateField = r }(jsGrid, jQuery), function (t, e, i) { function r(e) { this.min = "", this.max = "", t.Field.call(this, e) } r.prototype = new t.Field({ css: "data-field", align: "left", format: "yyyy-MM-dd", filtering: !0, inserting: !0, editing: !0, autosearch: !0, readOnly: !1, sorter: function (t, e) { return new Date(t) - new Date(e) }, itemTemplate: function (t) { return t ? new Date(t).toLocaleString() : "-" }, filterTemplate: function (t) { if (!this.filtering) return ""; var i = this._grid; return $input = e("<input>"), $result = this.filterControl = this._filterPicker = $input.datepicker({ defaultDate: new Date }), this.autosearch && $input.on("change", function (t) { i.search() }), $result }, filterValue: function () { if (this.filtering) return this.filterControl.datepicker("getDate") }, insertTemplate: function (t) { return this.inserting ? this._insertPicker = e("<input>").datepicker({ defaultDate: new Date }) : t }, insertValue: function () { var t = this._insertPicker.datepicker("getDate"); return t ? t.toISOString() : t }, editTemplate: function (t) { return this.editing ? this._editPicker = t ? e("<input>").datepicker().datepicker("setDate", new Date(t)) : e("<input>").datepicker().datepicker("setDate", new Date) : t }, editValue: function () { var t = this._editPicker.datepicker("getDate"); return t ? t.toISOString() : t } }), t.fields.datetime = t.DatetimeField = r }(jsGrid, jQuery), function (t, e, i) { function r(e) { this.name = "id", this.sorting = !1, this.selectedCss = "jsgrid-is-selected", t.Field.call(this, e) } r.prototype = new t.Field({ headerTemplate: function () { this._grid, this.selectedCss; var t = this._selectedItemControls, i = this.headerControl = e("<input>").attr("type", "checkbox"); return i.on("change", function (i) { var r = this.checked; e(t).each(function (t, e) { e.prop("checked", !r), e.click() }) }), i }, itemTemplate: function (t, i) { var r = this.selectedCss, n = this._selectItem, a = this._unselectItem, o = e("<input>").attr("type", "checkbox").attr("data-primary-key", i[this.name] ? i[this.name] : 0).prop("checked", !1); return o.on("change", function (t) { var o = e(this).prop("checked"), s = e(this).parent().get(0), p = e(s).parent().get(0); o ? (n(i), e(p).addClass(r)) : (a(i), e(p).removeClass(r)) }), this._selectedItemControls.push(o), o }, _selectItem: function (e) { t.Grid.prototype.selectedItems_.push(e) }, _unselectItem: function (i) { t.Grid.prototype.selectedItems_ = e.grep(t.Grid.prototype.selectedItems_, function (t) { return t !== i }) }, _selectedItemControls: [], width: 10, sorting: !1, align: "center" }), t.fields.selectcheckbox = t.MultiSelectControlField = r }(jsGrid, jQuery), function (t, e, i) { t.Grid.prototype.width = "100%", t.Grid.prototype.height = "auto", t.Grid.prototype.autoload = !1, t.Grid.prototype.editing = !1, t.Grid.prototype.filtering = !1, t.Grid.prototype.inserting = !1, t.Grid.prototype.paging = !0, t.Grid.prototype.pageSize = 16, t.Grid.prototype.pageButtonCount = 7, t.Grid.prototype.pagerFormat = "Total: {itemCount} , Page: {pageIndex} / {pageCount} &nbsp;&nbsp; {first} {prev} {pages} {next} {last}", t.Grid.prototype.pagePrevText = '<span class="glyphicon glyphicon-backward"></span>', t.Grid.prototype.pageNextText = '<span class="glyphicon glyphicon-forward" aria-hidden="true"></span>', t.Grid.prototype.pageFirstText = '<span class="glyphicon glyphicon-fast-backward"></span>', t.Grid.prototype.pageLastText = '<span class="glyphicon glyphicon-fast-forward"></span>', t.Grid.prototype.pageLoading = !0, t.Grid.prototype.sorting = !1, t.Grid.prototype.selectedItems_ = [], t.Grid.prototype.selectedItems = function () { return t.Grid.prototype.selectedItems_ }, t.Grid.prototype.exportCSV = function (t) { var e = [], i = [], r = []; this.fields.forEach(function (t, r, n) { t.hasOwnProperty("title") && t.hasOwnProperty("name") && (e.push(t.title), i.push(t.name)) }), r.push(e.join("\t")), this.data.forEach(function (t, e, n) { var a = []; i.forEach(function (e, i) { var r = null === t[e] ? "" : t[e].toString(); r = r.replace(/\t/gi, " "), a.push(r) }), r.push(a.join("\t")) }); var n, a = r.join("\n").toString(), o = []; o.push(255, 254); for (var s = 0; s < a.length; ++s)n = a.charCodeAt(s), o.push(255 & n), o.push(n / 256 >>> 0); var p = new Blob([new Uint8Array(o)], { type: "text/csv;charset=UTF-16LE;" }); if (navigator.msSaveBlob) navigator.msSaveBlob(p, fName); else { var c = document.createElement("a"); if (void 0 !== c.download) { var d = window.URL.createObjectURL(p); c.setAttribute("href", d), c.setAttribute("download", t), c.style.visibility = "hidden", document.body.appendChild(c), c.click(), document.body.removeChild(c), window.URL.revokeObjectURL(d) } } }, t.Grid.prototype.onDataExporting = function (t) { console.log(t) } }(jsGrid, jQuery);